// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @map("_id")
  email       String   @unique
  nif         String?
  apdName     String?
  apdNumber   Int?
  firstName   String?
  lastName    String?
  nick        String?
  pass        String?
  active      Boolean  @default(false)
  picture     String?
  provider    String
  block       Boolean  @default(false)
  permissions String[] @default([])
  role        String[] @default([])
  partner     Boolean  @default(false)

  sessions     Session[]
  TeamMember   TeamMember[]
  TicketPlayer TicketPlayer[]
}

model Session {
  id        String   @id @map("_id")
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Team {
  id     String  @id @map("_id")
  name   String  @unique
  fag    String? @default("")
  banner String? @default("")

  members TeamMember[]
}

model TeamMember {
  id         String           @id @map("_id")
  status     TeamMemberStatus @default(INACTIVE)
  isAccepted Boolean          @default(false)
  player     User             @relation(fields: [userId], references: [id])
  Team       Team?            @relation(fields: [teamId], references: [id])
  teamId     String?
  userId     String
}

enum TeamMemberStatus {
  ACTIVE
  INACTIVE
}

model GameEvent {
  id          String          @id @map("_id")
  name        String
  duration    String
  openDoors   String
  startGame   String
  status      GameEventStatus @default(SCHEDULE)
  date        DateTime        @unique
  teamGap     Int
  description String
  gameGoals   String[]
  squads      Squad[]
  rules       Rule[]
  prices      Prices[]
  tickets     Ticket[]
  location    Locations       @relation(fields: [locationsId], references: [id])
  locationsId String
}

enum GameEventStatus {
  ACTIVE
  SCHEDULE
  DONE
}

model Prices {
  id          String     @id @map("_id")
  type        String
  amount      Int
  gameEvent   GameEvent? @relation(fields: [gameEventId], references: [id])
  gameEventId String?
}

model Rule {
  id          String     @id @map("_id")
  description String
  GameEvent   GameEvent? @relation(fields: [gameEventId], references: [id])
  gameEventId String?
}

model Locations {
  id         String      @id @map("_id")
  street     String
  directions String
  GameEvent  GameEvent[]
}

model Squad {
  id           String         @id @map("_id")
  name         String
  maxPlayers   Int
  color        String
  items        String[]
  GameEvent    GameEvent?     @relation(fields: [gameEventId], references: [id])
  gameEventId  String?
  TicketPlayer TicketPlayer[]
}

model Ticket {
  id            String         @id @map("_id")
  date          DateTime
  ticketQRToken String
  transactionId String?
  status        TicketStatus   @default(UNPAYED)
  totalPrice    Float
  players       TicketPlayer[]

  GameEvent   GameEvent? @relation(fields: [gameEventId], references: [id])
  gameEventId String?
}

enum TicketStatus {
  PAYED
  UNPAYED
}

model TicketPlayer {
  id                String            @id @map("_id")
  entryPlayerStatus EntryPlayerStatus @default(STANDBY)
  hasCheckIn        Boolean           @default(false)
  cronoMeasure      String            @default("-")
  bbWeight          String            @default("-")
  squad             Squad             @relation(fields: [squadId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  Ticket            Ticket?           @relation(fields: [ticketId], references: [id])
  ticketId          String?
  userId            String
  squadId           String
}

enum EntryPlayerStatus {
  STANDBY
  ACCEPTED
  NOT_ACCEPTED
}
