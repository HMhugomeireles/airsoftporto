// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @map("_id")
  email       String   @unique
  nif         String?  @unique
  apdName     String?
  apdNumber   Int?
  firstName   String?
  lastName    String?
  nick        String?
  pass        String?
  active      Boolean  @default(false)
  picture     String?
  provider    String
  block       Boolean  @default(false)
  permissions String[] @default([])
  role        String[] @default([])
  partner     Boolean  @default(false)

  sessions    Session[]
  EntryPlayer EntryPlayer[]
  TeamPlayer  TeamPlayer[]
}

model Session {
  id        String   @id @map("_id")
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Team {
  id     String  @id @map("_id")
  name   String  @unique
  fag    String? @default("")
  banner String? @default("")

  players TeamPlayer[]
}

model TeamPlayer {
  id         String  @id @map("_id")
  isActive   Boolean @default(false)
  isAccepted Boolean @default(false)
  player     User    @relation(fields: [userId], references: [id])
  Team       Team?   @relation(fields: [teamId], references: [id])
  teamId     String?
  userId     String
}

model Event {
  id          String      @id @map("_id")
  name        String
  duration    String
  openDoors   String
  startGame   String
  eventStatus EventStatus @default(SCHEDULE)
  date        DateTime    @unique
  squads      Squads[]
  teamGap     Int
  description String
  gameGoals   String[]
  rules       Rule[]
  prices      Prices[]
  tickets     Ticket[]
  location    Locations   @relation(fields: [locationsId], references: [id])
  locationsId String
}

enum EventStatus {
  ACTIVE
  SCHEDULE
  DONE
}

model Prices {
  id      String  @id @map("_id")
  type    String
  amount  Int
  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?
}

model Rule {
  id          String  @id @map("_id")
  description String
  Event       Event?  @relation(fields: [eventId], references: [id])
  eventId     String?
}

model Locations {
  id         String  @id @map("_id")
  street     String
  directions String
  Event      Event[]
}

model Squads {
  id          String        @id @map("_id")
  name        String
  maxPlayers  Int
  color       String
  items       String[]
  Event       Event?        @relation(fields: [eventId], references: [id])
  eventId     String?
  EntryPlayer EntryPlayer[]
}

model Ticket {
  id            String   @id @map("_id")
  isPayed       Boolean  @default(false)
  ticketQRToken String
  isChecked     Boolean  @default(false)
  token         String
  expiresAt     DateTime
  totalPrice    Float

  entries EntryPlayer[]
  event   Event         @relation(fields: [eventId], references: [id])
  eventId String
}

model EntryPlayer {
  id                String            @id @map("_id")
  entryPlayerStatus EntryPlayerStatus @default(STANDBY)
  hasCheckIn        Boolean           @default(false)
  cronoMeasure      String
  bbWeight          String
  squad             Squads            @relation(fields: [squadsId], references: [id])
  player            User              @relation(fields: [userId], references: [id])
  userId            String
  Ticket            Ticket?           @relation(fields: [ticketId], references: [id])
  ticketId          String?
  squadsId          String
}

enum EntryPlayerStatus {
  STANDBY
  ACCEPTED
  NOT_ACCEPTED
}
