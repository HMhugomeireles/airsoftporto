// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @map("_id")
  email       String   @unique
  nif         String?  @unique
  apdName     String?
  apdNumber   Int?
  firstName   String?
  lastName    String?
  nick        String?
  pass        String?
  active      Boolean  @default(false)
  picture     String?
  provider    String
  block       Boolean  @default(false)
  permissions String[] @default([])
  role        String[] @default([])
  partner     Boolean  @default(false)

  sessions    Session[]
  EntryPlayer EntryPlayer[]
  TeamPlayer  TeamPlayer[]
}

model Session {
  id        String   @id @map("_id")
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Team {
  id     String  @id @map("_id")
  name   String  @unique
  fag    String? @default("")
  banner String? @default("")

  players TeamPlayer[]
}

model TeamPlayer {
  id         String  @id @map("_id")
  isActive   Boolean @default(false)
  isAccepted Boolean @default(false)
  player     User    @relation(fields: [userId], references: [id])
  Team       Team?   @relation(fields: [teamId], references: [id])
  teamId     String?
  userId     String
}

model Gametype {
  id    String  @id @map("_id")
  name  String
  Event Event[]
}

model Event {
  id             String   @id @map("_id")
  name           String
  date           DateTime @unique
  eventTeamsType String[]
  squads         String[]
  teamGap        Int

  Tickets Ticket[]

  gametype   Gametype @relation(fields: [gametypeId], references: [id])
  gametypeId String
}

model Ticket {
  id        String   @id @map("_id")
  isPayed   Boolean  @default(false)
  isChecked Boolean  @default(false)
  token     String
  expiresAt DateTime
  costs     Float

  event   Event         @relation(fields: [eventId], references: [id])
  entries EntryPlayer[]
  eventId String
}

model EntryPlayer {
  id           String  @id @map("_id")
  isAttended   Boolean
  cronoMeasure String
  bbWeight     String
  player       User    @relation(fields: [userId], references: [id])
  userId       String
  Ticket       Ticket? @relation(fields: [ticketId], references: [id])
  ticketId     String?
}
